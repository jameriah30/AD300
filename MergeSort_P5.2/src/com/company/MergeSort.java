package com.company;

public class MergeSort {

    // Merges two subarrays of arr[].
    // First subarray is arr[l..m]
    // Second subarray is arr[m+1..r]
    void merge(int arr[], int l, int m, int r)
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;

        /* Create temp arrays */
        int L[] = new int [n1];
        int R[] = new int [n2];

        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i)
            L[i] = arr[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = arr[m + 1+ j];


        /* Merge the temp arrays */

        // Initial indexes of first and second subarrays
        int i = 0, j = 0;

        // Initial index of merged subarry array
        int k = l;
        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        /* Copy remaining elements of L[] if any */
        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }

        /* Copy remaining elements of R[] if any */
        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // Main function that sorts arr[l..r] using
    // merge()
    void sort(int arr[], int l, int r)
    {
        if (l < r)
        {
            // Find the middle point
            int m = (l+r)/2;

            // Sort first and second halves
            sort(arr, l, m);
            sort(arr , m+1, r);

            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }

    /* A utility function to print array of size n */
    static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i=0; i<n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    // Driver method
    public static void main(String args[])
    {
        long startTime = System.currentTimeMillis();
        // method body
        int arr[] ={396, 269, 69, 304, 321, 120, 461, 224, 240, 2, 140, 347, 160, 305, 13, 201, 105, 482, 76, 468, 179, 408, 413, 134, 426, 364, 72, 252, 199, 170, 152, 223, 339, 51, 110, 379, 285, 70, 168, 303, 238, 20, 155, 313, 291, 458, 219, 386, 358, 272, 373, 237, 483, 6, 204, 255, 183, 117, 1, 99, 21, 357, 360, 36, 122, 181, 41, 164, 207, 5, 351, 327, 470, 445, 307, 261, 137, 451, 267, 129, 18, 423, 90, 460, 39, 27, 172, 455, 222, 133, 189, 367, 66, 296, 143, 479, 100, 124, 227, 180, 114, 481, 302, 131, 362, 473, 92, 250, 454, 355, 254, 322, 432, 281, 75, 377, 374, 448, 384, 498, 206, 58, 372, 326, 441, 83, 425, 280, 369, 430, 465, 56, 212, 429, 317, 163, 191, 335, 500, 295, 229, 47, 246, 411, 82, 230, 262, 45, 74, 417, 138, 299, 236, 61, 437, 57, 490, 162, 214, 253, 86, 341, 144, 62, 251, 102, 334, 108, 424, 268, 434, 331, 159, 23, 484, 407, 98, 499, 77, 28, 323, 265, 174, 196, 226, 175, 353, 292, 247, 431, 399, 309, 22, 192, 403, 258, 294, 95, 59, 157,49, 363, 276, 204, 107, 63, 89, 445, 409, 62, 480, 465, 423, 53, 392, 46, 116, 144, 217, 21, 231, 134, 176, 127, 232, 129, 148, 24, 327, 234, 499, 273, 168, 429, 193, 125, 162, 498, 444, 72, 439, 331, 450, 58, 201, 477, 66, 489, 105, 334, 252, 41, 251, 274, 286, 10, 288, 388, 110, 182, 335, 17, 78, 347, 83, 318, 97, 13, 179, 39, 260, 225, 325, 37, 469, 406, 453, 183, 339, 384, 383, 418, 47, 457, 169, 194, 441, 223, 199, 278, 20, 94, 394, 167, 366, 137, 306, 398, 34, 324, 229, 408, 109, 112, 303, 174, 401, 158, 254, 419, 364, 50, 185, 357, 373, 272, 81, 309, 370, 413, 7, 14, 198, 371, 411, 284, 238, 323, 130, 259, 337, 497, 160, 206, 354, 458, 464, 382, 197, 65, 449, 298, 221, 485, 88, 282, 171, 471, 435, 135, 123, 417, 416, 57, 154, 496, 494, 460, 226, 165, 483, 102, 428, 142, 55, 391, 271, 447, 328, 344, 113, 343, 236, 321, 11, 119, 84, 342, 166, 247, 28, 101, 133, 351, 43, 18, 2, 147, 395, 312, 361, 322, 330, 433, 296, 326, 220, 149, 270, 74,243, 486, 333, 445, 238, 4, 233, 155, 121, 207, 39, 62, 237, 183, 78, 16, 223, 320, 417, 240, 444, 22, 85, 159, 499, 203, 197, 52, 450, 91, 273, 168, 10, 363, 500, 432, 379, 354, 449, 235, 74, 477, 150, 307, 302, 36, 220, 188, 476, 130, 454, 93, 33, 383, 394, 282, 478, 484, 294, 263, 347, 126, 326, 69, 251, 376, 473, 322, 462, 424, 96, 152, 292, 215, 26, 67, 92, 305, 95, 27, 53, 412, 14, 272, 245, 375, 290, 225, 262, 144, 456, 385, 43, 184, 289, 493, 104, 154, 65, 332, 164, 351, 87, 253, 23, 6, 468, 487, 101, 97, 411, 194, 474, 270, 112, 157, 70, 464, 346, 228, 359, 102, 254, 173, 276, 56, 457, 55, 196, 187, 218, 129, 200, 274, 202, 149, 403, 45, 13, 145, 258, 309, 471, 175, 125, 480, 201, 495, 436, 433, 139, 190, 195, 189, 367, 482, 115, 94, 84, 286, 29, 414, 109, 408, 163, 153, 370, 362, 366, 331, 492, 122, 167, 32, 295, 337, 336, 275, 325, 271, 241, 34, 287, 140, 318, 217, 120, 458, 407, 162, 88, 377, 54, 491, 357, 221, 9, 249, 425, 288,116, 452, 210, 450, 18, 331, 27, 188, 144, 292, 70, 176, 138, 486, 391, 129, 252, 386, 81, 32, 75, 454, 345, 260, 122, 400, 329, 333, 141, 23, 395, 72, 198, 189, 50, 8, 71, 168, 213, 25, 277, 470, 313, 7, 108, 63, 140, 230, 262, 299, 133, 35, 251, 157, 107, 90, 89, 30, 39, 203, 379, 38, 241, 427, 272, 488, 103, 337, 416, 66, 288, 68, 219, 98, 371, 293, 267, 245, 428, 226, 156, 440, 83, 372, 34, 76, 208, 150, 127, 295, 10, 303, 191, 434, 445, 218, 254, 184, 29, 459, 192, 82, 155, 249, 403, 105, 373, 211, 318, 43, 91, 99, 298, 201, 31, 332, 97, 159, 473, 490, 142, 120, 60, 261, 12, 425, 468, 88, 417, 51, 19, 232, 397, 466, 484, 458, 320, 284, 297, 317, 80, 350, 166, 314, 335, 326, 169, 499, 244, 5, 441, 269, 474, 475, 59, 158, 377, 160, 216, 130, 364, 469, 437, 374, 255, 438, 394, 467, 300, 222, 247, 175, 139, 48, 460, 349, 281, 336, 119, 423, 128, 365, 487, 426, 369, 131, 286, 305, 361, 186, 62, 152, 16, 480, 497, 52, 489, 398, 124, 195,20, 193, 208, 150, 314, 474, 279, 260, 340, 138, 96, 173, 285, 252, 469, 30, 91, 421, 111, 455, 234, 131, 182, 103, 280, 28, 379, 361, 348, 183, 70, 277, 71, 383, 311, 463, 112, 347, 360, 309, 443, 62, 17, 227, 78, 282, 88, 439, 63, 353, 294, 123, 98, 472, 147, 50, 116, 101, 365, 169, 47, 65, 60, 316, 315, 106, 259, 445, 241, 490, 327, 22, 121, 46, 428, 158, 356, 328, 10, 371, 493, 230, 278, 332, 478, 492, 217, 363, 389, 56, 235, 457, 117, 413, 7, 343, 423, 134, 181, 195, 270, 114, 178, 430, 82, 175, 257, 109, 283, 222, 156, 168, 295, 185, 209, 166, 132, 212, 19, 4, 83, 188, 126, 334, 79, 370, 381, 291, 27, 480, 318, 177, 426, 194, 238, 477, 127, 221, 412, 488, 414, 333, 444, 302, 319, 406, 289, 422, 254, 8, 382, 385, 401, 5, 207, 95, 271, 405, 498, 159, 339, 432, 362, 442, 242, 135, 487, 176, 500, 276, 368, 301, 120, 265, 108, 464, 239, 253, 338, 424, 196, 325, 18, 202, 496, 141, 143, 436, 377, 85, 433, 303, 471, 388, 81, 300, 393, 317, 197, 24};


        System.out.println("Given Array");
        printArray(arr);

        MergeSort ob = new MergeSort();
        ob.sort(arr, 0, arr.length-1);

        System.out.println("\nSorted array");
        printArray(arr);

        System.out.println();


        long runTime= System.currentTimeMillis() - startTime;
        System.out.println("Merge Sort execution time: " + runTime);
    }
}
